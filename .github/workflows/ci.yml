name: Node CI

on: [push, pull_request]

jobs:
  darwin:
    name: NodeJS ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [10.x, 12.x]
        os: [macos-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache npm
        uses: actions/cache@v2
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: npm install and test
        run: npm cit
        env:
          CI: true

      - name: Install XCode latest-stable
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install Java 8
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8

      - name: npm install cordova
        run: npm install cordova@9.0.0 -g

      - name: Cache .gradle
        uses: burrunan/gradle-cache-action@v1
        with:
          job-id: jdk8
          gradle-version: wrapper

      - name: Checkout clean plugin
        uses: actions/checkout@v2
        with:
          path: plugin

      - name: cordova create
        run: cordova create testApp com.skwas.testApp testApp

      - name: cordova plugin add
        working-directory: ./testApp
        run: cordova plugin add ${{ github.workspace }}/plugin

      - name: cordova platform add android
        working-directory: ./testApp
        run: cordova platform add android

      - name: cordova platform add ios
        working-directory: ./testApp
        run: cordova platform add ios

      - name: cordova build
        working-directory: ./testApp
        run: cordova build --no-telemetry


  non-darwin:
    name: NodeJS ${{ matrix.node-version }} on ${{ matrix.os }}, SDK ${{ matrix.android-sdk }}, AndroidX = ${{ matrix.androidX }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [10.x, 12.x]
        os: [ubuntu-latest, windows-latest]
        android-sdk: [default, 19, 29]
        androidX: [true, false]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache npm
        uses: actions/cache@v2
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: npm install and test
        run: npm cit
        env:
          CI: true

      - name: Install Java 8
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8

      - name: npm install cordova
        run: npm install cordova@9.0.0 -g

      - name: Cache .gradle
        uses: burrunan/gradle-cache-action@v1
        with:
          job-id: jdk8
          gradle-version: wrapper

      - name: Checkout clean plugin
        uses: actions/checkout@v2
        with:
          path: plugin

      - name: cordova create
        run: cordova create testApp com.skwas.testApp testApp

      # Build with different SDK's
      - name: Set Android SDK ${{ matrix.android-sdk }}
        if: matrix.android-sdk != 'default'
        run: |
          npm run cordova-preference -- ./testApp android-targetSdkVersion ${{ matrix.android-sdk }}
          npm run cordova-preference -- ./testApp android-minSdkVersion ${{ matrix.android-sdk }}

      # Use cordova-plugin-androidx-adapter plugin to verify shims work.
      - name: Enable AndroidX
        if: matrix.androidX
        run: |
          npm run cordova-preference -- ./testApp AndroidXEnabled true
      
      - name: Add AndroidX shim
        if: matrix.androidX
        working-directory: ./testApp
        run: cordova plugin add cordova-plugin-androidx-adapter

      - name: cordova plugin add
        working-directory: ./testApp
        run: cordova plugin add ${{ github.workspace }}/plugin

      - name: cordova platform add android
        working-directory: ./testApp
        run: cordova platform add android

      - name: cordova build
        working-directory: ./testApp
        run: cordova build --no-telemetry
